# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float pointsize;

layout (location=0) in vec3 position_vs;

flat out int   vertexID_fs;
flat out float vertexZ_fs;
flat out float pointSize;

void main() {
  vec4 p = vec4(position_vs, 1);
  vec4 p_mv = MV * p;
  gl_Position = P * p_mv;

  gl_PointSize = pointsize / (-p_mv.z);
  pointSize = gl_PointSize;

  vertexID_fs = gl_VertexID;
  vertexZ_fs  = p_mv.z;
}

# fragment shader
# version 430

const   vec4 WHITE = vec4(1, 1, 1, 1);
const   vec4 RED   = vec4(1, 0, 0, 1);
layout (origin_upper_left) in vec4 gl_FragCoord;
flat in int   vertexID_fs;
flat in float vertexZ_fs;
flat in float pointSize;

out vec4 color_fb;

layout (std430, binding = 0) buffer SSB {
  // Input fields
  uint  clicked_x, clicked_y;
  // Internally used fields
  float pick_z;
  int   pick_lock;
  // Output field
  int   pick_id;
};

const int UNLOCKED = 0, LOCKED = 1;

subroutine void Fragment(float, float);
subroutine uniform Fragment fragment;

/* Warning: A hidden bug seems to live here.
 * We should update pick_{z,id,lock} as a transaction and broadcast their values to other threads.
 */
subroutine (Fragment)
void pick(float D, float d) {
  if (int(gl_FragCoord.x) != clicked_x) return;
  if (int(gl_FragCoord.y) != clicked_y) return;

  while (pick_z < vertexZ_fs) {
    if (atomicCompSwap(pick_lock, UNLOCKED, LOCKED) == UNLOCKED) {
      pick_z = vertexZ_fs;
      pick_id = vertexID_fs;
      pick_lock = UNLOCKED;
      return;
    }
  }
}

subroutine (Fragment)
void paint(float D, float d) {

  if (abs((gl_FragCoord.x - clicked_x) * (gl_FragCoord.y - clicked_y)) < 5) color_fb = WHITE;
  else {
      vec3 ambient = (pick_id == vertexID_fs ? RED : WHITE).rgb;
      float diffuse = max(1 - D * D, 0);
      color_fb = vec4((ambient + diffuse) / 2, 1);
      if (d >= (pointSize - 1)) color_fb.a = ((pointSize + 1) - d) / 2;
  }
}

void main() {
  vec2 XY = 2.0 * gl_PointCoord.xy - 1.0;
  vec2 xy = pointSize * XY;
  float d = length(xy);
  if (d > pointSize + 1) discard;
  fragment(length(XY), d);
}
